// DO NOT EDIT THIS FILE! If you need changes, change the code generator
// instead. This file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s libs/execution/ctypes rust -p
//    /home/ken/src/monad-bft/monad-exec-events/src -frustfmt +nightly

//! Definitions of event payloads used with the EXEC event ring

#![allow(non_camel_case_types)]
#![allow(unused_imports)]

use alloy_primitives::{Address, B256, U256};
use monad_event_ring::event_metadata::*;

use crate::eth_ctypes::*;

/// Each type of event is assigned a unique value in this enumeration
#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
#[repr(u16)]
pub enum exec_event_type {
    #[default]
    NONE,
    BLOCK_START,
    BLOCK_END,
    BLOCK_QC,
    BLOCK_FINALIZED,
    BLOCK_VERIFIED,
    BLOCK_REJECT,
    TXN_START,
    TXN_REJECT,
    TXN_RECEIPT,
    TXN_LOG,
    TXN_CALL_FRAME,
    EVM_ERROR,
}

/// Stored in event descriptor `user[0]` field to tag the block & transaction
/// context of event
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct flow_info {
    pub block_flow_id: u16, // Index into block flow metadata array
    pub txn_id: u32,        // txn id == txn_num + 1; id 0 -> no txn
}

/// Information about a proposal that is signed during the voting process to
/// produce a quorum certificate.
///
/// The consensus decision is to agree that a particular proposed block becomes
/// the canonical block with a particular height. This is accomplished by
/// voting, via the cryptographic signing of the summary data in this object.
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct proposal_metadata {
    pub round: u64,        // Round of block proposal
    pub epoch: u64,        // Epoch of block proposal
    pub block_number: u64, // Proposal is to become this block
    pub id: B256,          // Monad consensus unique ID for proposal
    pub parent_round: u64, // Parent round of proposed block
    pub parent_id: B256,   // Consensus unique ID of parent block
}

/// Event recorded at the start of block execution
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct block_header {
    pub proposal: proposal_metadata, // Execution is for this proposed block
    pub parent_eth_hash: B256,       // Hash of Ethereum parent block
    pub chain_id: U256,              // Block chain we're associated with
    pub exec_input: eth_block_exec_input, // Ethereum execution inputs
}

/// Event recorded upon successful block execution
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct block_result {
    pub eth_block_hash: B256,               // Hash of Ethereum block
    pub exec_output: eth_block_exec_output, // Ethereum execution outputs
}

/// Event recorded when a proposed block obtains a quorum certificate
pub type block_qc = proposal_metadata;

/// Event recorded when consensus finalizes a block
pub type block_finalized = proposal_metadata;

/// Event recorded when consensus verifies the state root of a finalized block
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct block_verified {
    pub block_number: u64, // Number of verified block
}

/// Event recorded when a block is rejected (i.e., is invalid)
///
/// This corresponds to a value in the `BlockError` enumeration in
/// `validate_block.hpp`, in the execution repo source code.
pub type block_reject = u32;

/// Event recorded when transaction processing starts
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct txn_start {
    pub txn_hash: B256,             // Keccak hash of transaction RLP
    pub sender: Address,            // Recovered sender address
    pub txn_header: eth_txn_header, // Transaction header
}

/// Event recorded when a transaction is rejected (i.e., is invalid)
///
/// This corresponds to a value in the `TransactionError` enumeration in
/// `validate_transaction.hpp`, in the execution repo source code.
pub type txn_reject = u32;

/// Event recorded when transaction execution halts
pub type txn_receipt = eth_txn_receipt;

/// Event recorded when a transaction emits a LOG
pub type txn_log = eth_txn_log;

/// Event recorded when a call frame is emitted
pub type txn_call_frame = eth_call_frame;

/// Error occurred in execution process (not a validation error)
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct evm_error {
    pub domain_id: u64,   // Boost.Outcome domain id of error
    pub status_code: i64, // Boost.Outcome status code of error
}

pub fn format_as(bytes: &[u8], event_type: exec_event_type) -> String {
    match event_type {
        exec_event_type::NONE => String::from("NONE"),
        exec_event_type::BLOCK_START => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const block_header) })
        }
        exec_event_type::BLOCK_END => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const block_result) })
        }
        exec_event_type::BLOCK_QC => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const block_qc) })
        }
        exec_event_type::BLOCK_FINALIZED => format!("{:?}", unsafe {
            *(bytes.as_ptr() as *const block_finalized)
        }),
        exec_event_type::BLOCK_VERIFIED => format!("{:?}", unsafe {
            *(bytes.as_ptr() as *const block_verified)
        }),
        exec_event_type::BLOCK_REJECT => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const block_reject) })
        }
        exec_event_type::TXN_START => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const txn_start) })
        }
        exec_event_type::TXN_REJECT => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const txn_reject) })
        }
        exec_event_type::TXN_RECEIPT => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const txn_receipt) })
        }
        exec_event_type::TXN_LOG => format!("{:?}", unsafe { *(bytes.as_ptr() as *const txn_log) }),
        exec_event_type::TXN_CALL_FRAME => format!("{:?}", unsafe {
            *(bytes.as_ptr() as *const txn_call_frame)
        }),
        exec_event_type::EVM_ERROR => {
            format!("{:?}", unsafe { *(bytes.as_ptr() as *const evm_error) })
        }
    }
}

pub const EXEC_EVENT_METADATA: [EventMetadata; 13] = [
    EventMetadata {
        event_type: exec_event_type::NONE as u16,
        c_name: "NONE",
        description: "Reserved code so that 0 remains invalid",
    },
    EventMetadata {
        event_type: exec_event_type::BLOCK_START as u16,
        c_name: "BLOCK_START",
        description: "Event recorded at the start of block execution",
    },
    EventMetadata {
        event_type: exec_event_type::BLOCK_END as u16,
        c_name: "BLOCK_END",
        description: "Event recorded upon successful block execution",
    },
    EventMetadata {
        event_type: exec_event_type::BLOCK_QC as u16,
        c_name: "BLOCK_QC",
        description: "Event recorded when a proposed block obtains a quorum certificate",
    },
    EventMetadata {
        event_type: exec_event_type::BLOCK_FINALIZED as u16,
        c_name: "BLOCK_FINALIZED",
        description: "Event recorded when consensus finalizes a block",
    },
    EventMetadata {
        event_type: exec_event_type::BLOCK_VERIFIED as u16,
        c_name: "BLOCK_VERIFIED",
        description: "Event recorded when consensus verifies the state root of a finalized block",
    },
    EventMetadata {
        event_type: exec_event_type::BLOCK_REJECT as u16,
        c_name: "BLOCK_REJECT",
        description: "Event recorded when a block is rejected (i.e., is invalid)",
    },
    EventMetadata {
        event_type: exec_event_type::TXN_START as u16,
        c_name: "TXN_START",
        description: "Event recorded when transaction processing starts",
    },
    EventMetadata {
        event_type: exec_event_type::TXN_REJECT as u16,
        c_name: "TXN_REJECT",
        description: "Event recorded when a transaction is rejected (i.e., is invalid)",
    },
    EventMetadata {
        event_type: exec_event_type::TXN_RECEIPT as u16,
        c_name: "TXN_RECEIPT",
        description: "Event recorded when transaction execution halts",
    },
    EventMetadata {
        event_type: exec_event_type::TXN_LOG as u16,
        c_name: "TXN_LOG",
        description: "Event recorded when a transaction emits a LOG",
    },
    EventMetadata {
        event_type: exec_event_type::TXN_CALL_FRAME as u16,
        c_name: "TXN_CALL_FRAME",
        description: "Event recorded when a call frame is emitted",
    },
    EventMetadata {
        event_type: exec_event_type::EVM_ERROR as u16,
        c_name: "EVM_ERROR",
        description: "Error occurred in execution process (not a validation error)",
    },
];

pub static EXEC_EVENT_DOMAIN_METADATA: EventDomainMetadata = EventDomainMetadata {
    metadata_hash: [
        0x33, 0x67, 0x2d, 0x68, 0x32, 0x48, 0x3f, 0x2e, 0xba, 0x64, 0xa6, 0x83, 0xab, 0xed, 0xa6,
        0xc9, 0x27, 0x4f, 0x0, 0xbe, 0xac, 0xc9, 0x1f, 0xbc, 0x80, 0x81, 0xd, 0xb9, 0xa9, 0xcb,
        0xc7, 0x22,
    ],
    events: &EXEC_EVENT_METADATA,
};

pub const EXEC_EVENT_DEFAULT_RING_PATH: &str = "/dev/hugepages/monad-exec-events";
